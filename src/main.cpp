#include "general.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <cstring>

using namespace std;

typedef void* (*EncryptFunc)(const unsigned char*, size_t, int, int, size_t*);
typedef void (*FreeFunc)(void*);

// –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –≤–µ–∫—Ç–æ—Ä
vector<unsigned char> readFile(string filename) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å file:// –µ—Å–ª–∏ –µ—Å—Ç—å
    const string prefix = "file://";
    if (filename.rfind(prefix, 0) == 0) {
        filename = filename.substr(prefix.size());
    }

    ifstream in(filename, ios::binary);
    if (!in) throw runtime_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: " + filename);
    return vector<unsigned char>((istreambuf_iterator<char>(in)), istreambuf_iterator<char>());
}

// –ó–∞–ø–∏—Å—å –≤–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–∞–π–ª
void writeFile(string filename, const vector<unsigned char>& data) {
    const string prefix = "file://";
    if (filename.rfind(prefix, 0) == 0) {
        filename = filename.substr(prefix.size());
    }

    ofstream out(filename, ios::binary);
    if (!out) throw runtime_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª: " + filename);
    out.write(reinterpret_cast<const char*>(data.data()), data.size());
}


// –í–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ -> –≤–µ–∫—Ç–æ—Ä
vector<unsigned char> readText() {
    string line;
    cout << "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ";
    cin.ignore();
    getline(cin, line);
    return vector<unsigned char>(line.begin(), line.end());
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
void printText(const vector<unsigned char>& data) {
    cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç: ";
    for (auto c : data) cout << c;
    cout << "\n";
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
void showMenu() {
    cout << "\033[2J\033[H"; 
    cout << "–î–µ–π—Å—Ç–≤–∏–µ:\n"
         << "\033[32m1. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\033[0m\n"
         << "\033[31m2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\033[0m\n"
         << "\033[34m3. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\033[0m\n"
         << "\033[35m4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\033[0m\n"
         << "\033[90m0. –í—ã—Ö–æ–¥\033[0m\n"
         << "\n–í—ã–±–æ—Ä: ";
}


// –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞
CryptoAlgo selectAlgorithm() {
    int c;
    cout << "–ê–ª–≥–æ—Ä–∏—Ç–º—ã:\n"
         << "1. –¢–∞–±–ª–∏—á–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞\n"
         << "2. AES\n"
         << "3. –í–∏–∂–µ–Ω–µ—Ä\n"
         << "–í—ã–±–æ—Ä: ";
    cin >> c;
    if (c >= 1 && c <= 3) return static_cast<CryptoAlgo>(c);
    throw runtime_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞.");
}

// –ó–∞–ø—É—Å–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
void runOperation(bool encrypt, bool isFile) {
    try {
        CryptoAlgo algo = selectAlgorithm();
        string color;
        switch (algo) {
        case TABLE:   color = "\033[33m"; break; // –∂—ë–ª—Ç—ã–π
        case AES:     color = "\033[34m"; break; // —Å–∏–Ω–∏–π
        case VIGENER: color = "\033[35m"; break; // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
}
        string algoName = (algo == TABLE) ? "–¢–∞–±–ª–∏—á–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞" : (algo == AES ? "AES" : "–í–∏–∂–µ–Ω–µ—Ä");
        cout << color << "üõ°Ô∏è  –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±—Ä–∞–Ω: " << algoName << "\033[0m\n";

        void* lib = loadCryptoLib(algo);
        auto func = loadCryptoFunc<EncryptFunc>(lib, encrypt ? "encrypt" : "decrypt");
        auto freeBuf = loadCryptoFunc<FreeFunc>(lib, "free_buffer");

        vector<unsigned char> input;
        if (isFile) {
            string filename;
            cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ";
            cin >> filename;
            input = readFile(filename);
        } else {
            input = readText();
        }

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏—Ñ—Ä–∞
        int param1 = 0, param2 = 0;
        if (algo == TABLE) {
            if (encrypt) {
                cout << "–í–≤–µ–¥–∏—Ç–µ 0 ‚Äî –∞–≤—Ç–æ (—Ä–∞–Ω–¥–æ–º), –∏–ª–∏ 1 ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ";
            } else {
                cout << "–í–≤–µ–¥–∏—Ç–µ 0 ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ table_params.txt, –∏–ª–∏ 1 ‚Äî –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é: ";
            }
        
            int mode;
            cin >> mode;
        
            if (mode == 0) {
                if (encrypt) {
                    srand(time(nullptr));
                    param1 = rand() % 5 + 2;
                    param2 = rand() % 5 + 2;
                    cout << "üîÅ –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: " << param1 << " —Å—Ç—Ä–æ–∫ √ó " << param2 << " —Å—Ç–æ–ª–±—Ü–æ–≤\n";
        
                    ofstream paramOut("table_params.txt");
                    if (paramOut) {
                        paramOut << param1 << " " << param2 << "\n";
                        paramOut.close();
                        cout << "üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ table_params.txt\n";
                    } else {
                        cerr << "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å table_params.txt\n";
                    }
                } else {
                    ifstream paramIn("table_params.txt");
                    if (paramIn >> param1 >> param2) {
                        cout << "üìÇ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " << param1 << " —Å—Ç—Ä–æ–∫ √ó " << param2 << " —Å—Ç–æ–ª–±—Ü–æ–≤\n";
                    } else {
                        cerr << "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è table_params.txt. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.\n";
                        return;
                    }
                }
            } else {
                cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: "; cin >> param1;
                cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: "; cin >> param2;
            }
        }
        
        
        else if (algo == VIGENER) {
            cout << "1 ‚Äî –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞, 0 ‚Äî –≤—Ä—É—á–Ω—É—é –ø–æ seed: ";
            cin >> param1;
            if (param1 == 0) {
                cout << "–í–≤–µ–¥–∏—Ç–µ seed: ";
                cin >> param2;
            }
        }

        size_t outSize;
        void* result = func(input.data(), input.size(), param1, param2, &outSize);

        vector<unsigned char> output((unsigned char*)result, (unsigned char*)result + outSize);
        freeBuf(result);

        string outFile;
        cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ";
        cin >> outFile;
        writeFile(outFile, output);
        cout << "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: " << outFile << "\n";

        if (encrypt) {
            char answer;
            cout << "\n‚ùì –•–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (y/n): ";
            cin >> answer;
            if (answer == 'y' || answer == 'Y') {
                vector<unsigned char> encrypted = readFile(outFile);
                auto decryptFunc = loadCryptoFunc<EncryptFunc>(lib, "decrypt");

                size_t decSize;
                void* decrypted = decryptFunc(encrypted.data(), encrypted.size(), param1, param2, &decSize);
                vector<unsigned char> result((unsigned char*)decrypted, (unsigned char*)decrypted + decSize);
                freeBuf(decrypted);

                cout << "\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ";
                for (auto c : result) cout << c;
                cout << "\n";
    }
}


    } catch (const exception& e) {
        cerr << "–û—à–∏–±–∫–∞: " << e.what() << "\n";
    }
    cout << "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...";
    cin.ignore();
    cin.get();
    cout << "\033[2J\033[H"; 

}
void runCLI(int argc, char* argv[]) {
    map<string, string> args;
    bool encrypt = false, decrypt = false;

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–ª–∞–≥–æ–≤
    for (int i = 1; i < argc; ++i) {
        string arg = argv[i];
        if (arg == "-e") encrypt = true;
        else if (arg == "-d") decrypt = true;
        else if (i + 1 < argc) {
            args[arg] = argv[++i];
        }
    }

    if (!encrypt && !decrypt) {
        cerr << "‚ùå –£–∫–∞–∂–∏—Ç–µ -e (encrypt) –∏–ª–∏ -d (decrypt)\n";
        return;
    }

    if (!args.count("--cipher")) {
        cerr << "‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á–µ—Ä–µ–∑ --cipher <table|aes|vigener>\n";
        return;
    }

    string cipher = args["--cipher"];
    CryptoAlgo algo;
    if (cipher == "table") algo = TABLE;
    else if (cipher == "aes") algo = AES;
    else if (cipher == "vigener") algo = VIGENER;
    else {
        cerr << "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: " << cipher << "\n";
        return;
    }

    void* lib = loadCryptoLib(algo);
    auto func = loadCryptoFunc<EncryptFunc>(lib, encrypt ? "encrypt" : "decrypt");
    auto freeBuf = loadCryptoFunc<FreeFunc>(lib, "free_buffer");

    vector<unsigned char> input;
    if (args.count("--text")) {
        input = vector<unsigned char>(args["--text"].begin(), args["--text"].end());
    } else if (args.count("--input")) {
        input = readFile(args["--input"]);
    } else {
        cerr << "‚ùå –£–∫–∞–∂–∏—Ç–µ --text –∏–ª–∏ --input <—Ñ–∞–π–ª>\n";
        return;
    }

    int param1 = 0, param2 = 0;
    if (algo == TABLE) {
        if (encrypt) {
            srand(time(nullptr));
            param1 = rand() % 5 + 2;
            param2 = rand() % 5 + 2;
            ofstream out("table_params.txt");
            out << param1 << " " << param2 << "\n";
        } else {
            ifstream in("table_params.txt");
            if (!(in >> param1 >> param2)) {
                cerr << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å table_params.txt\n";
                return;
            }
        }
    }

    if (algo == VIGENER) {
        param1 = 1; param2 = 0;
    }

    size_t outSize;
    void* result = func(input.data(), input.size(), param1, param2, &outSize);

    vector<unsigned char> output((unsigned char*)result, (unsigned char*)result + outSize);
    freeBuf(result);

    if (args.count("--output")) {
        writeFile(args["--output"], output);
        cout << "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: " << args["--output"] << "\n";
    } else {
        cout << "üñ® –†–µ–∑—É–ª—å—Ç–∞—Ç: ";
        for (auto c : output) cout << c;
        cout << "\n";
    }
}


int main(int argc, char* argv[]) {
    setlocale(LC_ALL, "");
    cout << "\033[2J\033[H";
    if (argc > 1) {
        runCLI(argc, argv);
        return 0;
    }
    while (true) {
        showMenu();
        int choice;
        cin >> choice;

        switch (choice) {
            case 1: runOperation(true, false); break;
            case 2: runOperation(false, false); break;
            case 3: runOperation(true, true); break;
            case 4: runOperation(false, true); break;
            case 0:
                cout << "–í—ã—Ö–æ–¥.\n";
                return 0;
            default:
                cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.\n";
        }
    }
}

